{"version":3,"sources":["logo.svg","components/Header.js","components/GalleryItem.js","components/GalleryCont.js","components/Home.js","components/AppRouter.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","GalleryItem","_props$image","image","farm","server","id","secret","src","concat","alt","height","width","GalleryCont","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchText","searchResults","searchTag","galleryRender","imageArray","photo","map","index","components_GalleryItem","key","Component","Home","searchInput","React","createRef","galleryFetch","search","arguments","length","undefined","fetch","then","response","json","responseData","setState","images","photos","catch","error","console","log","submitSearch","submit","preventDefault","current","value","currentTarget","reset","state","components_Header","onSubmit","type","ref","placeholder","keys","components_GalleryCont","AppRouter","react_router_dom","to","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","components_AppRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f0cb383.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Header = (props) => (\n  <div className = 'header'>\n    <h1>Search images from Flickr</h1>\n    <p>A project by Alfy Hushairi</p>\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst GalleryItem = (props) => {\n\n  const { farm, server, id, secret } = props.image\n\n  return (\n    <div className ='galleryItem'>\n      <img src= {`https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`} alt=\"Flickr\" height=\"200\" width=\"355\"></img>\n    </div>\n  )\n\n\n};\n\nexport default GalleryItem;\n","import React, {Component} from 'react';\nimport GalleryItem from './GalleryItem';\n\nclass GalleryCont extends Component {\n\n  constructor() {\n    super();\n  }\n\nsearchText = () => {\n\n    let searchResults = this.props.searchTag;\n    if (searchResults != \"\") {\n      searchResults = `You searched for : ${this.props.searchTag}`;\n    }\n    return searchResults;\n  }\n\n  render () {\n    let imageArray = this.props.imageArray.photo;\n    let galleryRender = imageArray.map((image, index) => <GalleryItem image={image} key={image.id}/>);\n\n\n    return (\n      <div className = 'galleryCont'>\n        <p className = 'galleryTitle'> {this.searchText()} </p>\n        <div className = 'galleryImages'>\n          {galleryRender}\n        </div>\n      </div>\n    )};\n}\n\nexport default GalleryCont;\n","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport Header from './Header'\nimport GalleryCont from './GalleryCont'\nimport apiKey from '../config.js'\n\n\n//Photo endpoint to use https://www.flickr.com/services/api/misc.urls.html\n\nclass Home extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      images: {},\n      searchTag: \"\"\n    };\n  }\n\n  searchInput = React.createRef();\n\n  galleryFetch  = (search = \"dogs\") => {\n      fetch(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=672ad18dd0d9678d40e576638b02ab93&tags=${search}&format=json&nojsoncallback=1`)\n      .then(response => response.json())\n      .then(responseData =>\n     {\n       this.setState({\n         images: responseData.photos\n       });\n     })\n     .catch(error => {\n       console.log('Error fetching and parsing data',error);\n     });\n    }\n\n  componentDidMount() {\n    // this.galleryFetch();\n  }\n\n  submitSearch = (submit) => {\n\n    submit.preventDefault();\n    this.galleryFetch(this.searchInput.current.value);\n   // console.log(this.searchInput.current.value);\n  this.setState({\n           searchTag: this.searchInput.current.value\n  });\n    submit.currentTarget.reset();\n\n  }\n\n  render() {\n\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Header />\n        <form onSubmit = {this.submitSearch}>\n        <input\n          type =\"text\"\n          ref = {this.searchInput}\n          placeholder = \"Enter a search word\"\n        />\n        <input\n          type = \"submit\"\n          value = \"Search\"\n        />\n\n        </form>\n        {Object.keys(this.state.images).length > 0 && (\n          <GalleryCont\n            imageArray = {this.state.images}\n            searchTag = {this.state.searchTag}\n          />\n        )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react'\nimport Home from './Home'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nconst AppRouter = (props) => {\n  return (\n    <Router>\n      <div className = \"navDiv\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/home\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/search\">Search</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      <Route path=\"/home\" exact component={Home} />\n      <Route path=\"/search\" exact component={Home} />\n    </Router>\n  );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport './styles/App.css';\nimport AppRouter from './components/AppRouter';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}